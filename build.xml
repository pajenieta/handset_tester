<?xml version="1.0"?>
<project name="handset_tester" default="package" basedir=".">

  <property environment="env"/>
  <property name="build.config.dir" value='src/build'/>
  <typedef file="${build.config.dir}/j2me.antlib.xml"/>

  <condition property='user.properties.location'
            value='${env.HANDSET_TESTER_USER_PROPERTIES_FILE}'
            else='${build.config.dir}/user.properties'>
    <isset property='env.HANDSET_TESTER_USER_PROPERTIES_FILE'/>
  </condition>

  <property file="${user.properties.location}"/>

  <condition property='has_all_deps'>
    <and>
      <available file='${antenna.jar}'/>
      <available file='${proguard.jar}'/>
      <available file='${junit.jar}'/>
    </and>
  </condition>

  <!-- nokia fix: the nokias40 emulator does not seem to properly accept device strings. -->
  <condition property='device' value=''>
    <equals arg1='${emulator}' arg2='nokias40' casesensitive='false' trim='true'/>
  </condition>

  <property file="${build.config.dir}/project.properties"/>

  <!--
    Set the ${wtk.home} property based on the value of the ${emulator}
    property, and default it to ${wtk.home.sun} if emulator is undefined.
  -->
  <condition property='wtk.home' value='${wtk.home.samsung}'>
    <equals arg1='${emulator}' arg2='samsung' casesensitive='false' trim='true'/>
  </condition>
  <condition property='wtk.home' value='${wtk.home.nokias40}'>
    <equals arg1='${emulator}' arg2='nokias40' casesensitive='false' trim='true'/>
  </condition>
  <property name='wtk.home' value='${wtk.home.sun}'/>

  <path id='project.classpath'>
    <pathelement path="${antenna.jar}"/>
    <pathelement path="${proguard.jar}"/>
    <fileset file="${wtk.home}/lib/jsr75.jar"/>
  </path>

  <path id='test.compile.classpath'>
    <pathelement path="${project.classpath}"/>
    <pathelement path="${project.build.outputDirectory}"/>
    <fileset file="${junit.jar}"/>
  </path>

  <path id='test.run.classpath'>
    <pathelement path="${project.classpath}"/>
    <pathelement path="${project.build.outputDirectory}"/>
    <pathelement path="${project.build.testOutputDirectory}"/>
    <fileset file="${junit.jar}"/>
  </path>

  <condition property="windows">
    <os family="windows"/>
  </condition>

  <condition property='must_symlink_proguard'>
    <and>
      <not><isset property='windows'/></not>
      <not><available file='${proguard.jar}'/></not>
    </and>
  </condition>

  <condition property='must_cp_proguard'>
    <and>
      <isset property='windows'/>
      <not><available file='${proguard.jar}'/></not>
    </and>
  </condition>

  <fail message='To use this build, you must set a wtk.home property to point to the install root of your j2me WTK'>
    <condition>
      <not>
        <resourceexists>
          <file file="${wtk.home}"/>
        </resourceexists>
      </not>
    </condition>
  </fail>


  <!-- ======= -->
  <!-- Targets -->
  <!-- ======= -->
  <target name='package' depends='initialize, resolve, compile, jad, jar, obfuscate, preverify, sign' description='Build the project'/>
  <target name='run' depends='package, run:midlet' description='Run the App'/>

  <target name="jad" depends='resolve'>
    <!--
      NOTE: The wtkjad task can update jad file metadata from the listed
            attributes or from the jar (jar file size). We can run it independently
            to update the jad file with attributes without recompiling.
    -->
    <wtkjad jadfile="${jadfile}"
            jarfile="${jarfile}"
            name="${midlet.name}"
            vendor="${vendor}"
            version="${project.version}">
        <midlet name="${midlet.name}"
                class="${project.mainClass}"
                icon="/img/phone.png"/>
        <!-- App configuration -->
<!--         <attribute name="LOG_LEVEL" value="${log.level}"/> -->
        <attribute name="MIDlet-Permissions" value="${app.permissions}" if="app.permissions"/>
    </wtkjad>
  </target>

  <target name='jar' description='package contents into a jar' depends='resolve'>
    <wtkpackage basedir="${project.build.outputDirectory}"
                jadfile="${jadfile}"
                jarfile="${jarfile}"
                obfuscate="false"
                preverify="false">
          <fileset dir="${project.build.resources}"/>
    </wtkpackage>
  </target>

  <target name='obfuscate' description='obfuscate and minify the output jar with proguard' depends='resolve'>
    <wtkobfuscate jadfile="${jadfile}"
                  jarfile="${jarfile}"
                  classpathref="project.classpath"/>
  </target>

  <target name='sign' description='Sign the jar and jad files with our code signing certificate' if="${sign.app}" depends='resolve'>
    <echo>Signing with: store pass: ${keystore.pass} / key pass: ${code_signing_key.pass}</echo>
    <wtksign keystore="${keystore.file}"
             jarfile="${jarfile}"
             jadfile="${jadfile}"
             storepass="${keystore.pass}"
             certpass="${code_signing_key.pass}"
             certalias="${code_signing_cert.alias}"/>
  </target>

  <target name='preverify' depends='resolve'>
    <wtkpreverify jarfile="${jarfile}" jadfile="${jadfile}"/>
  </target>

  <target name='run:midlet' depends='resolve'>
    <wtkrun jadfile="${jadfile}"
            device='${device}'
            heapsize='${emulator.heapsize}'
            wait="${wtk.run.wait}"/>
  </target>

  <target name='compile' description='compile java sources' depends='initialize,resolve'>
    <wtkbuild srcdir="${project.build.sourceDirectory}"
              destdir="${project.build.outputDirectory}"
              classpathref="project.classpath"
              preverify="false"/>
  </target>

  <!-- TODO: add other tests -->
  <target name='test' description='run all tests' depends='test:junit'/>

  <target name='test-compile' description='compile unit tests' depends='compile'>
    <javac srcdir='${project.build.testSourceDirectory}'
           destdir='${project.build.testOutputDirectory}'
           classpathref='test.compile.classpath'
           source='1.1'/>
  </target>

  <target name='test:junit' description='unit tests' depends='test-compile'>
    <junit>
      <classpath refid="test.run.classpath" />
      <formatter type="brief" usefile="false" />
      <batchtest fork="yes">
        <fileset dir="${project.build.testOutputDirectory}" includes="**/*Test.class"/>
      </batchtest>
    </junit>
  </target>

  <target name='clean' description='delete the target directory, including compiled class, jar and jad files'>
    <delete dir="${project.build.directory}"/>
  </target>

  <target name='initialize' description='initialize target directories'>
    <mkdir dir="${project.build.outputDirectory}"/>
    <mkdir dir="${project.build.testOutputDirectory}"/>
    <mkdir dir="${keystore.dir}"/>
    <mkdir dir="${lib.dir}"/>

    <!--
      lib.classpath will include lib/*jar, any jars specified on the ant
      command line with -lib, and all jars in ant's lib directory (including ones
      symlinked there)
    -->
    <path id="lib.classpath">
      <fileset dir="${lib.dir}" includes="*.jar"/>
      <pathelement path="${java.class.path}"/>
    </path>

  </target>

  <!-- For *nix only -->
  <target name='fix_wm_name'
    description='If you run a non-reparenting window manager with x11/xorg, run this target once per xorg session to fix irregular emulator GUI behavior'>
    <exec executable="wmname">
      <arg value="LG3D"/>
    </exec>
  </target>

  <!--
    Generate an eclipse project.  This will clobber your existing eclipse project.
    So do not do this more than once if you have customized your eclipse project.
  -->
  <target name='eclipse:eclipse'>
    <concat destfile=".classpath">
      <fileset file="src/ant/eclipse_classpath_template.xml"/>
      <filterchain><expandproperties/></filterchain>
    </concat>
    <concat destfile=".project">
      <fileset file="src/ant/eclipse_project_template.xml"/>
      <filterchain><expandproperties/></filterchain>
    </concat>
  </target>

  <!-- WARNING: do not run this once you have set up your eclipse project. Debugging only. -->
  <target name='eclipse:clean'>
    <delete file=".classpath"/>
    <delete file=".project"/>
  </target>

  <target name='props' description='print all build properties. This is just for debugging the build.'>
    <echoproperties/>
  </target>

  <target name='list:emulators'
          description='List all installed j2me emulators. For this to work, you must define a wtk.home.EMULATOR_NAME property'>
    <listEmulators/>
  </target>

  <target name='list:devices' description='List all devices available for the active emulator.'>
    <listDevices/>
  </target>

  <target name='list:permissions'
          description='Print the list of permissions that will be included in the jad'>
    <concat>
      <propertyresource name='app.permissions'/>
    </concat>
  </target>

  <target name='package:all' description='create packages for multiple platforms/variants'>

    <!-- default package -->
    <antcall target='package' inheritAll='true' inheritRefs='true'>
      <param name='midlet.name' value='${project.artifactId}_signed'/>
      <param name='sign.app' value='true'/>
      <param name='jarfile' value='${project.build.directory}/${project.artifactId}_signed.jar'/>
      <param name='jadfile' value='${project.build.directory}/${project.artifactId}_signed.jad'/>
    </antcall>

    <!-- generic unsigned package -->
    <antcall target='package' inheritAll='true' inheritRefs='true'>
      <param name='midlet.name' value='${project.artifactId}_unsigned'/>
      <param name='sign.app' value='false'/>
      <param name='app.permissions' value=''/>
      <param name='jarfile' value='${project.build.directory}/${project.artifactId}_unsigned.jar'/>
      <param name='jadfile' value='${project.build.directory}/${project.artifactId}_unsigned.jad'/>
    </antcall>

  </target>

  <target name='run:variant' description='a convenience target to save keystrokes for running a particular build variant'>
    <wtkrun jadfile='${project.build.directory}/${project.artifactId}_${variant}.jad' device='${device}' wait='${wtk.run.wait}'/>
  </target>

  <!-- ============ -->
  <!-- Dependencies -->
  <!-- ============ -->

  <!-- use the maven ant plugin to resolve dependencies -->
  <target name='resolve:maven' description='get build deps with maven ant tasks' depends='initialize' unless='has_all_deps'>
    <available classname='org.apache.maven.artifact.Artifact' property='maven_ant_tasks_available' classpathref='lib.classpath'/>
    <antcall target='download-maven-ant-tasks' inheritAll='true' inheritRefs='true'/>
  </target>

  <!--
    TODO: do not use single hard-coded maven-ant-tasks URL... randomly
    select location from a handful of known URLs?
  -->
  <target name='download-maven-ant-tasks' depends='initialize' unless='maven_ant_tasks_available'>
    <get dest='${lib.dir}'
         src='http://apache.cs.utah.edu/maven/binaries/maven-ant-tasks-2.1.3.jar'
         skipexisting='true'/>
  </target>

  <!--
    Once we have the maven ant tasks, we can resolve our deps and copy them to the lib.dir
  -->
  <target name='resolve' depends='resolve:deps,link-proguard'>
    <taskdef resource="antenna.properties" classpathref="lib.classpath"/>
  </target>

  <target name='resolve:deps' description='retrieve dependencies with maven and copy them to lib.dir'
      depends='initialize,resolve:maven' unless='has_all_deps'>

    <taskdef name="dependencies" classname="org.apache.maven.artifact.ant.DependenciesTask" classpathref='lib.classpath'/>

    <dependencies filesetId="dependency.fileset" useScope="runtime">
      <dependency groupId="net.sf.antenna" artifactId="antenna" version="${antenna.version}"/>
      <dependency groupId="net.sf.proguard" artifactId="proguard" version="${proguard.version}"/>
      <dependency groupId="junit" artifactId="junit" version="${junit.version}"/>
    </dependencies>

    <copy todir="${lib.dir}">
      <fileset refid="dependency.fileset" />
      <mapper type="flatten" />
    </copy>

  </target>

  <target name='link-proguard' depends='link-proguard-unix,cp-proguard-windows'/>
  <target name='link-proguard-unix' if='must_symlink_proguard'>
    <symlink link="${lib.dir}/proguard.jar" resource="proguard-${proguard.version}.jar"/>
  </target>
  <target name='cp-proguard-windows' if='must_cp_proguard'>
    <copy tofile="${lib.dir}/proguard.jar" file="${lib.dir}/proguard-${proguard.version}.jar"/>
  </target>

</project>
